#!/usr/bin/env python3
"""
AWS Credentials Setup Script for Voice Biomarker Application

This script helps you set up your AWS credentials and test the connection.

Usage:
    python setup_aws_credentials.py
"""

import os
import sys
import subprocess
from pathlib import Path

def check_env_file():
    """Check if .env file exists."""
    return Path('.env').exists()

def create_or_update_env_file(aws_access_key_id: str, aws_secret_access_key: str, aws_region: str = "eu-central-1"):
    """Create or update .env file with AWS credentials."""
    
    # Read existing .env if it exists
    existing_vars = {}
    env_file = Path('.env')
    
    if env_file.exists():
        try:
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        existing_vars[key.strip()] = value.strip()
        except Exception as e:
            print(f"‚ö†Ô∏è  Warning: Could not read existing .env file: {e}")
    
    # Update with new AWS credentials
    existing_vars.update({
        'AWS_ACCESS_KEY_ID': aws_access_key_id,
        'AWS_SECRET_ACCESS_KEY': aws_secret_access_key,
        'AWS_REGION': aws_region
    })
    
    # Write back to .env file
    try:
        with open(env_file, 'w') as f:
            f.write("# Voice Biomarker AWS Configuration\n")
            f.write("# Generated by setup_aws_credentials.py\n\n")
            
            # Write AWS credentials first
            f.write("# AWS Credentials\n")
            f.write(f"AWS_ACCESS_KEY_ID={aws_access_key_id}\n")
            f.write(f"AWS_SECRET_ACCESS_KEY={aws_secret_access_key}\n")
            f.write(f"AWS_REGION={aws_region}\n\n")
            
            # Write other existing variables
            aws_keys = {'AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'AWS_REGION'}
            other_vars = {k: v for k, v in existing_vars.items() if k not in aws_keys}
            
            if other_vars:
                f.write("# Other Configuration\n")
                for key, value in other_vars.items():
                    f.write(f"{key}={value}\n")
        
        print(f"‚úÖ AWS credentials saved to .env file")
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to write .env file: {e}")
        return False

def set_env_variables(aws_access_key_id: str, aws_secret_access_key: str, aws_region: str = "eu-central-1"):
    """Set environment variables for current session."""
    os.environ['AWS_ACCESS_KEY_ID'] = aws_access_key_id
    os.environ['AWS_SECRET_ACCESS_KEY'] = aws_secret_access_key
    os.environ['AWS_REGION'] = aws_region
    print("‚úÖ AWS credentials set in current session")

def test_aws_connection():
    """Run the AWS connection test script."""
    print("\nüß™ Running AWS connection tests...")
    print("-" * 50)
    
    try:
        result = subprocess.run([sys.executable, 'test_aws_connection.py'], 
                              capture_output=False, text=True)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Failed to run connection test: {e}")
        return False

def main():
    """Main setup function."""
    print("üîë Voice Biomarker AWS Credentials Setup")
    print("=" * 50)
    print()
    print("This script will help you configure your AWS credentials")
    print("for the Voice Biomarker application.")
    print()
    
    # Check if credentials are already set
    existing_access_key = os.getenv('AWS_ACCESS_KEY_ID')
    existing_secret_key = os.getenv('AWS_SECRET_ACCESS_KEY')
    existing_region = os.getenv('AWS_REGION', 'eu-central-1')
    
    if existing_access_key and existing_secret_key:
        print(f"üîç Found existing AWS credentials in environment:")
        print(f"   Access Key: {existing_access_key[:8]}...{existing_access_key[-4:]}")
        print(f"   Region: {existing_region}")
        print()
        
        response = input("Do you want to use these credentials? (y/n): ").lower().strip()
        if response in ['y', 'yes']:
            print("‚úÖ Using existing credentials")
            return test_aws_connection()
        else:
            print("üìù Let's set up new credentials...")
    
    print()
    print("üìã Please enter your AWS credentials:")
    print("(You can find these in the AWS Console ‚Üí IAM ‚Üí Users ‚Üí [Your User] ‚Üí Security credentials)")
    print()
    
    # Get AWS credentials from user
    while True:
        aws_access_key_id = input("AWS Access Key ID: ").strip()
        if aws_access_key_id:
            break
        print("‚ùå Access Key ID cannot be empty")
    
    while True:
        aws_secret_access_key = input("AWS Secret Access Key: ").strip()
        if aws_secret_access_key:
            break
        print("‚ùå Secret Access Key cannot be empty")
    
    aws_region = input(f"AWS Region (default: eu-central-1): ").strip() or "eu-central-1"
    
    print()
    print("üíæ How would you like to save these credentials?")
    print("1. Save to .env file (recommended for development)")
    print("2. Set as environment variables (current session only)")
    print("3. Both")
    
    while True:
        choice = input("Enter your choice (1-3): ").strip()
        if choice in ['1', '2', '3']:
            break
        print("‚ùå Please enter 1, 2, or 3")
    
    success = True
    
    # Save credentials based on user choice
    if choice in ['1', '3']:  # Save to .env file
        success &= create_or_update_env_file(aws_access_key_id, aws_secret_access_key, aws_region)
    
    if choice in ['2', '3']:  # Set environment variables
        set_env_variables(aws_access_key_id, aws_secret_access_key, aws_region)
    
    if not success:
        print("‚ùå Failed to save credentials")
        return False
    
    print()
    print("üéØ Credentials configured successfully!")
    
    # Ask if they want to test the connection
    print()
    test_response = input("Would you like to test the AWS connection now? (y/n): ").lower().strip()
    
    if test_response in ['y', 'yes']:
        return test_aws_connection()
    else:
        print()
        print("üìã To test your AWS connection later, run:")
        print("   python test_aws_connection.py")
        print()
        print("üìã To test your database connection, run:")
        print("   python test_database_setup.py")
        return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1) 